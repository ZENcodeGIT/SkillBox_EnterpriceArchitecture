## 10. Анализ и описание архитектурных опций и обоснование выбора. 

---
Выбор архитектуры
Прдлагается к реалиазации микросервисная архитектура по следующим причинам:
1) высокая скорость разработки - паралельно команды могут разрабатывать несколько сервисов (высокий TimeToMarket, важный параметр в конкурентной борьбе0
2) высокая скорость внесения изменений (доработки) - за счет малой связности есть возможность оперативного изменения функциоанала для пользователей и возможности тестирования
3) высокая гибкость и масштабирование  - быстрая реакция на потребности рынка
4) потребность в поддержке микросервисной архитектуры, в связи с трудоемкостью (команда разработчиков уже в штате)


Дополнительно:
1.	Реализация зоны DMZ: для обеспения безопасности от внешних воздействий
2.	Использование API Gateway: облегчение поддержки, возможность тестирования ограниченным трафиком, уменьшение трудозатрат при дальнейшем развитии
3.	Использование облачных провайдеров: перекладыване функций бекапирования, развертывания инфраструктуры, мониторинга на вендора
4.	Обновление данных в распределенной архитектуре по шабону SAGA - по причине оперативности и надежности

Технологии:
1. В связи с трудностью прогнозирования роста базы пользователей рекомендутеся вынеение сервисов в облака (AWS, S3 и тп)
2. Веб-сервер: Apache (веб-сервер с открытым исходным кодом) / NginX (имеет преимущество перед Apache, поскольку он служит веб-сервером и прокси-сервером. Подход, управляемый событиями, который обрабатывает тысячи запросов в одном потоке, обеспечивает более высокую производительность, скорость и экономическую эффективност)
3. Приложение: Java (требует значительного объема памяти. Из-за абстракции JVM программы также работают медленнее, позволяет писать код и запускать его на любой платформе с использованием среды виртуальной машины Java (JVM))/ Python (динамически типизированный язык очень гибок и подходит для небольших и крупных проектов веб-приложений, а также для различных сегментов, таких как мобильные приложения, видеоигры, программирование искусственного интеллекта и т. д.)
4. API: RESTful API - API передачи репрезентативного состояния в облегченном формате JSON. Он хорошо масштабируем, надежен и обеспечивает высокую производительность, что делает его самым популярным API.
5. DataBase: PostgreSQL - реляционная, Prometheus  - бд временных рядов для данных с устройств IoT

---
